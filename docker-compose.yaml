version: "3.2"
services:
  # Backend service - multiple instances of the backend
  backend_1:
    build:
      context: ./
    container_name: morl_backend_1
    restart: always
    environment:
      - SERVICE_NAME=backend
      - SERVER_ID=server_1
    expose:
      - "4000"
    networks:
      - morl_network
    # entrypoint: ["/bin/bash", "-c", "chmod +x /wait-for-it.sh && /wait-for-it.sh postgres_primary:5432 -- /wait-for-it.sh postgres_replica:5432 -- /start_backend.sh"]
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./start_backend.sh:/start_backend.sh
    depends_on:
      - mongodb
      - postgres_primary
      - postgres_replica

  backend_2:
    build:
      context: ./
    container_name: morl_backend_2
    restart: always
    environment:
      - SERVICE_NAME=backend
      - SERVER_ID=server_2
    expose:
      - "4000"
    networks:
      - morl_network
    # entrypoint: ["/bin/bash", "-c", "chmod +x /wait-for-it.sh && /wait-for-it.sh postgres_primary:5432 -- /wait-for-it.sh postgres_replica:5432 -- /start_backend.sh"]
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./start_backend.sh:/start_backend.sh
    depends_on:
      - mongodb
      - postgres_primary
      - postgres_replica

  backend_3:
    build:
      context: ./
    container_name: morl_backend_3
    restart: always
    environment:
      - SERVICE_NAME=backend
      - SERVER_ID=server_3
    expose:
      - "4000"
    networks:
      - morl_network
    # entrypoint: ["/bin/bash", "-c", "chmod +x /wait-for-it.sh && /wait-for-it.sh postgres_primary:5432 -- /wait-for-it.sh postgres_replica:5432 -- /start_backend.sh"]
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./start_backend.sh:/start_backend.sh
    depends_on:
      - mongodb
      - postgres_primary
      - postgres_replica


# MongoDB database
  mongodb:
    image: mongo:latest
    container_name: morl_mongodb
    # restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=morl
    ports:
      - "27017:27017"
    networks:
      - morl_network
    volumes:
      - mongo_data:/data/db
    command: ["mongod", "--logpath", "/dev/null"]
  

# PostgreSQL Primary Database
  postgres_primary:
    image: postgres:latest
    container_name: postgres_primary
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: morl
      PGDATA: /var/lib/postgresql/data
    volumes:
      - primary_data:/var/lib/postgresql/data
      - ./internal/db/postgres/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    ports:
      - "5432:5432"
    networks:
      - morl_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "morl"]
      interval: 10s
      retries: 5
      timeout: 20s
    # command: >
    #   bash -c "
    #   chown -R postgres:postgres /var/lib/postgresql/data &&
    #   su postgres -c 'config_file=/var/lib/postgresql/data/postgresql.conf'
    #   "

  # PostgreSQL Replica Database
  postgres_replica:
    image: postgres:latest
    container_name: postgres_replica
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: morl
      REPLICATE_FROM: postgres_primary
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./internal/db/postgres/replica:/var/lib/postgresql/data
    depends_on:
      - postgres_primary
    networks:
      - morl_network
    command: >
      bash -c "
        # Clean the data directory if it's not empty
        rm -rf /var/lib/postgresql/data/* &&
        # Ensure proper ownership
        chown -R postgres:postgres /var/lib/postgresql/data &&
        su postgres -c '
        # Wait for the primary database to be ready
        until pg_isready -h postgres_primary -U admin; do
          sleep 1;
        done;
        # Use pg_basebackup to initialize the replica
        PGPASSWORD=admin pg_basebackup -h postgres_primary -D /var/lib/postgresql/data -U admin -Fp -Xs -P -R &&
        # Start the postgres process
        postgres'
      "


  # NGINX service - used as a reverse proxy and load balancer
  nginx:
    image: nginx:latest
    container_name: morl_nginx
    restart: always
    ports:
      - "5802:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - morl_network
    depends_on:
      - backend_1
      - backend_2
      - backend_3

networks:
  morl_network:
    driver: bridge

volumes:
  mongo_data:
  primary_data:

